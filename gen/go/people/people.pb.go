// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: people/v1/people.proto

package people

import (
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/codec/types"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type OfficeStaff struct {
	Id          int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Email       string `protobuf:"bytes,3,opt,name=email,proto3" json:"email,omitempty"`
	WorkingDays int32  `protobuf:"varint,4,opt,name=working_days,json=workingDays,proto3" json:"working_days,omitempty"`
}

func (m *OfficeStaff) Reset()         { *m = OfficeStaff{} }
func (m *OfficeStaff) String() string { return proto.CompactTextString(m) }
func (*OfficeStaff) ProtoMessage()    {}
func (*OfficeStaff) Descriptor() ([]byte, []int) {
	return fileDescriptor_4d8914f9109771ab, []int{0}
}
func (m *OfficeStaff) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OfficeStaff) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OfficeStaff.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OfficeStaff) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OfficeStaff.Merge(m, src)
}
func (m *OfficeStaff) XXX_Size() int {
	return m.Size()
}
func (m *OfficeStaff) XXX_DiscardUnknown() {
	xxx_messageInfo_OfficeStaff.DiscardUnknown(m)
}

var xxx_messageInfo_OfficeStaff proto.InternalMessageInfo

func (m *OfficeStaff) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *OfficeStaff) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *OfficeStaff) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *OfficeStaff) GetWorkingDays() int32 {
	if m != nil {
		return m.WorkingDays
	}
	return 0
}

type SaleStaff struct {
	Id              int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name            string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Email           string `protobuf:"bytes,3,opt,name=email,proto3" json:"email,omitempty"`
	ProductQuantity int32  `protobuf:"varint,4,opt,name=product_quantity,json=productQuantity,proto3" json:"product_quantity,omitempty"`
}

func (m *SaleStaff) Reset()         { *m = SaleStaff{} }
func (m *SaleStaff) String() string { return proto.CompactTextString(m) }
func (*SaleStaff) ProtoMessage()    {}
func (*SaleStaff) Descriptor() ([]byte, []int) {
	return fileDescriptor_4d8914f9109771ab, []int{1}
}
func (m *SaleStaff) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SaleStaff) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SaleStaff.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SaleStaff) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SaleStaff.Merge(m, src)
}
func (m *SaleStaff) XXX_Size() int {
	return m.Size()
}
func (m *SaleStaff) XXX_DiscardUnknown() {
	xxx_messageInfo_SaleStaff.DiscardUnknown(m)
}

var xxx_messageInfo_SaleStaff proto.InternalMessageInfo

func (m *SaleStaff) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *SaleStaff) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *SaleStaff) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *SaleStaff) GetProductQuantity() int32 {
	if m != nil {
		return m.ProductQuantity
	}
	return 0
}

type IsStaff struct {
	Staff *types.Any `protobuf:"bytes,1,opt,name=staff,proto3" json:"staff,omitempty"`
	X     int64      `protobuf:"varint,2,opt,name=x,proto3" json:"x,omitempty"`
}

func (m *IsStaff) Reset()         { *m = IsStaff{} }
func (m *IsStaff) String() string { return proto.CompactTextString(m) }
func (*IsStaff) ProtoMessage()    {}
func (*IsStaff) Descriptor() ([]byte, []int) {
	return fileDescriptor_4d8914f9109771ab, []int{2}
}
func (m *IsStaff) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IsStaff) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IsStaff.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IsStaff) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IsStaff.Merge(m, src)
}
func (m *IsStaff) XXX_Size() int {
	return m.Size()
}
func (m *IsStaff) XXX_DiscardUnknown() {
	xxx_messageInfo_IsStaff.DiscardUnknown(m)
}

var xxx_messageInfo_IsStaff proto.InternalMessageInfo

func (m *IsStaff) GetStaff() *types.Any {
	if m != nil {
		return m.Staff
	}
	return nil
}

func (m *IsStaff) GetX() int64 {
	if m != nil {
		return m.X
	}
	return 0
}

func init() {
	proto.RegisterType((*OfficeStaff)(nil), "people.OfficeStaff")
	proto.RegisterType((*SaleStaff)(nil), "people.SaleStaff")
	proto.RegisterType((*IsStaff)(nil), "people.IsStaff")
}

func init() { proto.RegisterFile("people/v1/people.proto", fileDescriptor_4d8914f9109771ab) }

var fileDescriptor_4d8914f9109771ab = []byte{
	// 277 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x2b, 0x48, 0xcd, 0x2f,
	0xc8, 0x49, 0xd5, 0x2f, 0x33, 0xd4, 0x87, 0xb0, 0xf4, 0x0a, 0x8a, 0xf2, 0x4b, 0xf2, 0x85, 0xd8,
	0x20, 0x3c, 0x29, 0xc9, 0xf4, 0xfc, 0xfc, 0xf4, 0x9c, 0x54, 0x7d, 0xb0, 0x68, 0x52, 0x69, 0x9a,
	0x7e, 0x62, 0x5e, 0x25, 0x44, 0x89, 0x52, 0x16, 0x17, 0xb7, 0x7f, 0x5a, 0x5a, 0x66, 0x72, 0x6a,
	0x70, 0x49, 0x62, 0x5a, 0x9a, 0x10, 0x1f, 0x17, 0x53, 0x66, 0x8a, 0x04, 0xa3, 0x02, 0xa3, 0x06,
	0x6b, 0x10, 0x53, 0x66, 0x8a, 0x90, 0x10, 0x17, 0x4b, 0x5e, 0x62, 0x6e, 0xaa, 0x04, 0x93, 0x02,
	0xa3, 0x06, 0x67, 0x10, 0x98, 0x2d, 0x24, 0xc2, 0xc5, 0x9a, 0x9a, 0x9b, 0x98, 0x99, 0x23, 0xc1,
	0x0c, 0x16, 0x84, 0x70, 0x84, 0x14, 0xb9, 0x78, 0xca, 0xf3, 0x8b, 0xb2, 0x33, 0xf3, 0xd2, 0xe3,
	0x53, 0x12, 0x2b, 0x8b, 0x25, 0x58, 0xc0, 0x66, 0x70, 0x43, 0xc5, 0x5c, 0x12, 0x2b, 0x8b, 0x95,
	0x0a, 0xb8, 0x38, 0x83, 0x13, 0x73, 0x28, 0xb6, 0x49, 0x93, 0x4b, 0xa0, 0xa0, 0x28, 0x3f, 0xa5,
	0x34, 0xb9, 0x24, 0xbe, 0xb0, 0x34, 0x31, 0xaf, 0x24, 0xb3, 0xa4, 0x12, 0x6a, 0x1b, 0x3f, 0x54,
	0x3c, 0x10, 0x2a, 0xac, 0xe4, 0xcc, 0xc5, 0xee, 0x59, 0x0c, 0xb1, 0x4f, 0x8b, 0x8b, 0xb5, 0x18,
	0xc4, 0x00, 0x5b, 0xc9, 0x6d, 0x24, 0xa2, 0x07, 0x09, 0x13, 0x3d, 0x58, 0x98, 0xe8, 0x39, 0xe6,
	0x55, 0x06, 0x41, 0x94, 0x08, 0xf1, 0x70, 0x31, 0x56, 0x80, 0x1d, 0xc2, 0x1c, 0xc4, 0x58, 0xe1,
	0xa4, 0x7e, 0xe2, 0x91, 0x1c, 0xe3, 0x85, 0x47, 0x72, 0x8c, 0x0f, 0x1e, 0xc9, 0x31, 0x4e, 0x78,
	0x2c, 0xc7, 0x70, 0xe1, 0xb1, 0x1c, 0xc3, 0x8d, 0xc7, 0x72, 0x0c, 0x51, 0xbc, 0x90, 0xf0, 0xb5,
	0x86, 0x50, 0x49, 0x6c, 0x60, 0xb3, 0x8c, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff, 0x23, 0xc0, 0x69,
	0x55, 0x8f, 0x01, 0x00, 0x00,
}

func (m *OfficeStaff) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OfficeStaff) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OfficeStaff) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.WorkingDays != 0 {
		i = encodeVarintPeople(dAtA, i, uint64(m.WorkingDays))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Email) > 0 {
		i -= len(m.Email)
		copy(dAtA[i:], m.Email)
		i = encodeVarintPeople(dAtA, i, uint64(len(m.Email)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintPeople(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintPeople(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SaleStaff) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SaleStaff) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SaleStaff) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ProductQuantity != 0 {
		i = encodeVarintPeople(dAtA, i, uint64(m.ProductQuantity))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Email) > 0 {
		i -= len(m.Email)
		copy(dAtA[i:], m.Email)
		i = encodeVarintPeople(dAtA, i, uint64(len(m.Email)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintPeople(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintPeople(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *IsStaff) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IsStaff) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IsStaff) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.X != 0 {
		i = encodeVarintPeople(dAtA, i, uint64(m.X))
		i--
		dAtA[i] = 0x10
	}
	if m.Staff != nil {
		{
			size, err := m.Staff.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPeople(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintPeople(dAtA []byte, offset int, v uint64) int {
	offset -= sovPeople(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *OfficeStaff) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovPeople(uint64(m.Id))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovPeople(uint64(l))
	}
	l = len(m.Email)
	if l > 0 {
		n += 1 + l + sovPeople(uint64(l))
	}
	if m.WorkingDays != 0 {
		n += 1 + sovPeople(uint64(m.WorkingDays))
	}
	return n
}

func (m *SaleStaff) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovPeople(uint64(m.Id))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovPeople(uint64(l))
	}
	l = len(m.Email)
	if l > 0 {
		n += 1 + l + sovPeople(uint64(l))
	}
	if m.ProductQuantity != 0 {
		n += 1 + sovPeople(uint64(m.ProductQuantity))
	}
	return n
}

func (m *IsStaff) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Staff != nil {
		l = m.Staff.Size()
		n += 1 + l + sovPeople(uint64(l))
	}
	if m.X != 0 {
		n += 1 + sovPeople(uint64(m.X))
	}
	return n
}

func sovPeople(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPeople(x uint64) (n int) {
	return sovPeople(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *OfficeStaff) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPeople
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OfficeStaff: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OfficeStaff: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPeople
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPeople
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPeople
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPeople
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPeople
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPeople
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPeople
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Email = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkingDays", wireType)
			}
			m.WorkingDays = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPeople
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WorkingDays |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPeople(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPeople
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SaleStaff) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPeople
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SaleStaff: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SaleStaff: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPeople
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPeople
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPeople
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPeople
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPeople
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPeople
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPeople
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Email = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductQuantity", wireType)
			}
			m.ProductQuantity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPeople
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProductQuantity |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPeople(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPeople
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IsStaff) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPeople
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IsStaff: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IsStaff: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Staff", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPeople
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPeople
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPeople
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Staff == nil {
				m.Staff = &types.Any{}
			}
			if err := m.Staff.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field X", wireType)
			}
			m.X = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPeople
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.X |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPeople(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPeople
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPeople(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPeople
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPeople
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPeople
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPeople
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPeople
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPeople
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPeople        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPeople          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPeople = fmt.Errorf("proto: unexpected end of group")
)
